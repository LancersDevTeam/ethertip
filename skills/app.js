const Web3 = require('web3');
const web3 = new Web3("https://rinkeby.infura.io");
const Web3Utils = require('web3-utils');
const util = require("ethereumjs-util");
const signerPrivKey = util.toBuffer(process.env.PRIV_KEY);

module.exports = function(controller) {
    controller.on(['reaction_added'], (bot, message) => {
        const emoji = ":" + message.reaction + ":";
        if(":moneybag:" === emoji) {
            bot.api.im.open({"user": message.item_user}, (err, res) => {
                bot.api.users.info({user: message.item_user}, function(err, info){
                    controller.storage.users.get(message.item_user, function (err, user) {

                        if (user) {
                            if (isNaN(user.tip)) {
                                user.tip = 0;
                            }
                            user.tip = user.tip + 1;
                        } else {
                            user = {
                                id: message.item_user,
                                name: info.user.name,
                                tip: 1
                            };
                        }

                        controller.storage.users.save(user, function (err) {
                        });
                    });
                })
            })
        }
    })

    controller.on('slash_command', function (bot, message) {
        switch (message.command) {
            case '/wallet':
            console.log("can load wallet command");
            controller.storage.users.get(message.user, function (err, user) {
                if (user) {
                    bot.replyPublic(message, "Your address:" + user.address + "  tip: " + user.tip);
                } else {
                    bot.replyPublic(message, "command: /register ether-wallet-address Please register your wallet address");
                }
            });
            break;

            case '/withdraw':
            controller.storage.users.get(message.user, function (err, user) {
                if (user) {
                    var validator = "Address generated by your secret key";
                    var hash = Web3Utils.soliditySha3(validator, message.user, user.tip);
                    var hashPersonalMessage = util.hashPersonalMessage(util.toBuffer(hash));
                    var result = util.ecsign(hashPersonalMessage, signerPrivKey);


                    var result_r = util.bufferToHex(result.r);
                    var result_s = util.bufferToHex(result.s).slice(2);
                    var result_v = util.bufferToHex(result.v).slice(2);

                    var sig = result_r + result_s + result_v;

                    bot.replyPublic(message,"You can withdraw your ether to " + user.address + " at below: " +
                    "https://Static_files_URL_at_S3/withdraw.html?id=" + message.user +
                    "&value=" + user.tip +
                    "&sig=" + sig);
                } else {
                    bot.replyPublic(message, "command: /register ether-wallet-address Please register your wallet address");
                }
            });
            break;

            case '/register':
            controller.storage.users.get(message.user, function (err, user) {
                if (user) {
                    if (message.text.length === 0) {
                        bot.replyPublic(message, 'Please enter your address.');
                        return;
                    }
                    user.address = message.text;
                } else {
                    if (message.text.length === 0) {
                        bot.replyPublic(message, 'Please enter your address.');
                        return;
                    }
                    user = {
                        id: message.user,
                        name: message.user_name,
                        address: message.text,
                        tip: 0
                    };
                }
                controller.storage.users.save(user, function (err) {
                    bot.replyPublic(message, 'registered WalletÔºÅ');
                });
            });
            break;
        }
    });
};
